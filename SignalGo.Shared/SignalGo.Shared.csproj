<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup Label="Globals">
    <SccProjectName>SAK</SccProjectName>
    <SccProvider>SAK</SccProvider>
    <SccAuxPath>SAK</SccAuxPath>
    <SccLocalPath>SAK</SccLocalPath>
  </PropertyGroup>
  <PropertyGroup>
    <!--netstandard2.0;-->
    <TargetFrameworks>netstandard2.0</TargetFrameworks>
    <!--<TargetFramework>netstandard2.0</TargetFramework>-->
    <MinimumVisualStudioVersion>10.0</MinimumVisualStudioVersion>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <AssemblyVersion>5.7.0.3</AssemblyVersion>
    <FileVersion>5.7.0.3</FileVersion>
    <!--<VersionPrefix>4.0</VersionPrefix>-->
    <Version>5.7.0.3</Version>
    <!--<VersionSuffix>beta1</VersionSuffix>-->
    <Authors>Ali Yousefi</Authors>
    <Company></Company>
    <DebugType>full</DebugType>
    <Product>SignalGo.Shared</Product>
    <Description>
      SignalGo is a library for Cross-Platform developers that makes it incredibly simple to add real-time web functionality to your applications. What is "real-time web" functionality? It's the ability to have your server-side code push content to the connected clients as it happens, in real-time. like WCF and SignalR
      Features:

      1.Send and receive any data like class,object,parameters,methods,return types

      2.Send(upload) and receive(download) stream like file stream

      3.Send and receive data with UDP connection for sound and video streamming

      4.Return data from a method (client and server)

      5.Linq query to Clients for send or receive data

      6.Setting for maximum and minimum and timeout data transport

      7.Using best security algoritm for send or receive data

      8.call methods from http (GET and Post) protocol(like browser) with support upload files and manage Controllers like asp.net MVC

      9.support async await methods

      10.full logging systeam

      11.manage data exchanger to customize model properties in send and receive data without create new class
      and other features...
      
      12.full async await tasks support
    </Description>
    <Copyright>Copyright © ali.visual.studio@gmail.com 2016</Copyright>
    <Summary>
    </Summary>
    <PackageReleaseNotes>
      1.fix bugs and more improvement
      2.added HttpKeyAttribute for method parameters
      3.support for SOAP protocol
      4.support for http calls on add signalgoservice references (easy to call http services)
      read document examples here:
      https://github.com/SignalGo/SignalGo-full-net

    </PackageReleaseNotes>
    <NeutralLanguage>en-US</NeutralLanguage>
    <PackageId>SignalGo.Net.Shared</PackageId>
    <PackageTags>SignalGo SignalR WCF Server Client Signal Sig RealTime Real-Time</PackageTags>
    <PackageIconUrl></PackageIconUrl>
    <PackageProjectUrl>https://github.com/SignalGo/SignalGo-full-net</PackageProjectUrl>
    <PackageLicenseUrl>https://github.com/SignalGo/SignalGo-full-net/blob/master/LICENSE</PackageLicenseUrl>
    <RepositoryUrl>https://github.com/SignalGo/SignalGo-full-net</RepositoryUrl>
    <RepositoryType>git</RepositoryType>
    <RootNamespace>SignalGo.Shared</RootNamespace>
    <AssemblyName>SignalGo.Shared</AssemblyName>
    <GenerateDocumentationFile>true</GenerateDocumentationFile>
    <!--<NetStandardImplicitPackageVersion>1.6.1</NetStandardImplicitPackageVersion>-->
    <MinClientVersion>2.12</MinClientVersion>
    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
    <PackageIcon>icon.png</PackageIcon>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>bin\$(Configuration)</OutputPath>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
    <DebugType>pdbonly</DebugType>
    <Optimize>true</Optimize>
    <OutputPath>bin\$(Configuration)</OutputPath>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>

  <!--<PropertyGroup Condition="'$(Configuration)|$(TargetFramework)|$(Platform)'=='Debug|net45|AnyCPU'">
    <TreatWarningsAsErrors>true</TreatWarningsAsErrors>
    <WarningsAsErrors />
  </PropertyGroup>-->


  <ItemGroup Condition="'$(TargetFramework)' == 'net35'">
    <Reference Include="System" />
    <Reference Include="System.Core" />
    <Reference Include="System.Xml.Linq" />
    <Reference Include="System.Data.DataSetExtensions" />
    <Reference Include="System.Data" />
    <Reference Include="System.Xml" />
    <PackageReference Include="Newtonsoft.Json" Version="12.0.3" />
    <PackageReference Include="TaskParallelLibrary" Version="1.0.2856" />
    <PackageReference Include="NetLegacySupport.Tuple" Version="1.1.1" />
  </ItemGroup>
  <ItemGroup Condition="'$(TargetFramework)' == 'net40'">
    <Reference Include="Microsoft.CSharp" />
    <Reference Include="System" />
    <Reference Include="System.Core" />
    <Reference Include="System.Xml.Linq" />
    <Reference Include="System.Data.DataSetExtensions" />
    <Reference Include="System.Data" />
    <Reference Include="System.Xml" />
    <PackageReference Include="Newtonsoft.Json" Version="12.0.3" />
  </ItemGroup>
  <ItemGroup Condition="'$(TargetFramework)' == 'net45'">
    <Reference Include="Microsoft.CSharp" />
    <Reference Include="System" />
    <Reference Include="System.Core" />
    <Reference Include="System.Xml.Linq" />
    <Reference Include="System.Data.DataSetExtensions" />
    <Reference Include="System.Data" />
    <Reference Include="System.Xml" />
    <PackageReference Include="Newtonsoft.Json" Version="12.0.3" />
  </ItemGroup>
  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard1.6'">
    <PackageReference Include="Newtonsoft.Json" Version="12.0.3" />
    <PackageReference Include="System.Diagnostics.StackTrace" Version="4.3.0" />
    <PackageReference Include="System.Xml.XmlSerializer" Version="4.3.0" />
    <PackageReference Include="System.Threading.Thread" Version="4.3.0" />
    <PackageReference Include="System.Reflection.TypeExtensions" Version="4.7.0" />
    <PackageReference Include="System.Reflection.Emit" Version="4.7.0" />
    <!--<PackageReference Include="NETStandard.Library" Version="1.6.1" />-->
  </ItemGroup>
  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard2.0'">
    <PackageReference Include="System.Reflection" Version="4.3.0" />
    <PackageReference Include="Newtonsoft.Json" Version="12.0.3" />
    <PackageReference Include="System.Diagnostics.StackTrace" Version="4.3.0" />
    <PackageReference Include="System.Xml.XmlSerializer" Version="4.3.0" />
    <PackageReference Include="System.Threading.Thread" Version="4.3.0" />
    <PackageReference Include="System.Reflection.TypeExtensions" Version="4.7.0" />
    <PackageReference Include="System.Reflection.Emit" Version="4.7.0" />
    <!--<PackageReference Include="NETStandard.Library" Version="2.0.0" />-->
  </ItemGroup>

  <ItemGroup Condition="'$(TargetFramework)' == 'netcoreapp1.0'">
    <PackageReference Include="Newtonsoft.Json" Version="12.0.3" />
    <PackageReference Include="System.Diagnostics.StackTrace" Version="4.3.0" />
    <PackageReference Include="System.Xml.XmlSerializer" Version="4.3.0" />
    <PackageReference Include="System.Threading.Thread" Version="4.3.0" />
    <PackageReference Include="System.Reflection.TypeExtensions" Version="4.7.0" />
    <PackageReference Include="System.Reflection.Emit" Version="4.7.0" />
    <PackageReference Include="Microsoft.NETCore.App" Version="2.0.3" />
  </ItemGroup>
  <ItemGroup Condition="'$(TargetFramework)' == 'netcoreapp2.0'">
    <PackageReference Include="Newtonsoft.Json" Version="12.0.3" />
    <PackageReference Include="System.Diagnostics.StackTrace" Version="4.3.0" />
    <PackageReference Include="System.Xml.XmlSerializer" Version="4.3.0" />
    <PackageReference Include="System.Threading.Thread" Version="4.3.0" />
    <PackageReference Include="System.Reflection.TypeExtensions" Version="4.7.0" />
    <PackageReference Include="System.Reflection.Emit" Version="4.7.0" />
    <PackageReference Include="Microsoft.NETCore.App" Version="2.0.3" />
  </ItemGroup>
  <ItemGroup Condition="'$(TargetFramework)' == 'portable45-net45+win8'">
    <PackageReference Include="Newtonsoft.Json" Version="12.0.3" />
    <PackageReference Include="rda.SocketsForPCL" Version="2.0.2" />
    <PackageReference Include="System.Reflection.Emit" Version="4.7.0" />
    <PackageReference Include="Microsoft.Extensions.Primitives" Version="2.1.1" />
  </ItemGroup>
  <ItemGroup Condition="'$(TargetFramework)' == 'portable-net45+win8+wpa81'">
    <PackageReference Include="Newtonsoft.Json" Version="12.0.3" />
    <PackageReference Include="rda.SocketsForPCL" Version="2.0.2" />
    <PackageReference Include="System.Reflection.Emit" Version="4.7.0" />
  </ItemGroup>
  <ItemGroup>
    <Compile Remove="Log\MethodCallsLogger.cs" />
    <Compile Remove="Log\MethodCallsLogLoader.cs" />
  </ItemGroup>
  <ItemGroup>
    <None Include="..\icon.png">
      <Pack>True</Pack>
      <PackagePath></PackagePath>
    </None>
  </ItemGroup>
  <!--<Import Project="Sdk.targets" Sdk="Microsoft.NET.Sdk" />-->
</Project>